
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import createDatabase
import os
from clean import cleanlinesskeywords
from pathlib import Path
from displays import *
from get import *



# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, Label, StringVar, Toplevel, CENTER, VERTICAL, HORIZONTAL, BOTH, END, TOP
from tkinter import ttk
import pandas as pd
import matplotlib as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import (
FigureCanvasTkAgg, NavigationToolbar2Tk)
import matplotlib.pyplot as plt
import sqlite3
from tkcalendar import Calendar
import numpy as np
import mplcursors

if not os.path.exists('data.db'):
    createDatabase.create_database()

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


center_screen()
    
photo_images = {}
current_canvas = None

connection = sqlite3.connect('data.db')
cursor = connection.cursor()

query = "SELECT DISTINCT city FROM listingsDec"

cursor.execute(query)

results = cursor.fetchall()

cityArray = []
for row in results:
    cityArray.append(row[0])

#print(cityArray)
connection.close()





# Display suburb listing
def show_canvas2():
    print('canvas 2')
    canvas.pack_forget()
    global current_canvas

    if current_canvas:
        current_canvas.pack_forget()

    canvaslistsuburb=Canvas(window, bg="#E8E8E8", height=626, width=932, bd=0, highlightthickness=0, relief="ridge")
    canvaslistsuburb.place(x = 0, y = 0)
    canvaslistsuburb.update()  # Update the canvas before getting dimensions
    canvaslistsuburb.create_rectangle(228.0, 122.0, 899.0, 517.0, fill="#FFFFFF", outline="")
    canvaslistsuburb.create_rectangle(0.0, 0.0, 195.0, 626.0, fill="#32213A", outline="")
    canvaslistsuburb.create_text(56.0, 36.0, anchor="nw", text="AJJ", fill="#FFFFFF", font=("Inter Bold", 40 * -1))

    image_image_6 = PhotoImage(file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvaslistsuburb
    image_6 = canvaslistsuburb.create_image(96.0, 145.0, image=image_image_6)
    button_image_1 = PhotoImage(file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0,
                      command=lambda: getSuburbListings(cal, calendarEnd, citySelect.get(), dataSelect.get()),
                      relief="flat")

    button_1.place(x=454.0, y=536.0, width=218.0, height=39.0)

    image_image_7 = PhotoImage(file=relative_to_assets("display_listings_for_suburb_img.png"))
    window.two = image_image_7
    image_7 = canvaslistsuburb.create_image(564.0, 70.0, image=image_image_7)

    label55 = Label(window, text="How Many Columns?")
    window.aaaaaeeeeeeea = label55

    label55.place(x=250, y=350)

    n = StringVar()
    dataSelect = ttk.Combobox(window, width = 22, height = 13, textvariable = n)
    dataSelect['values'] = ['Short', 'All']
    dataSelect.set('Short')

    window.niineeeeee = dataSelect
    dataSelect.place(x=250,y=378)

    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2

    label2.place(x=532, y=350)

    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray

    window.niine = citySelect
    citySelect.place(x=472,y=378)

    button_image_1 = PhotoImage(file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0,
                      command=lambda: show_canvas6(), relief="flat")
    button_1.place(x=33.0, y=539.0, width=126.0, height=56.0)

    button_image_2 = PhotoImage(file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(image=button_image_2, borderwidth=0, highlightthickness=0,
                      command=lambda: show_canvas4(), relief="flat")
    button_2.place(x=33.0, y=302.0, width=126.0, height=56.0)

    button_image_3 = PhotoImage(file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(image=button_image_3, borderwidth=0, highlightthickness=0,
                      command=lambda: show_canvas3(), relief="flat")
    button_3.place(x=33.0, y=460.0, width=126.0, height=56.0)

    button_image_4 = PhotoImage(file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(image=button_image_4,borderwidth=0,highlightthickness=0,
                      command=lambda: show_canvas5(),relief="flat")
    button_4.place(x=33.0, y=381.0, width=126.0, height=56.0)

    button_image_5 = PhotoImage(file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(image=button_image_5, borderwidth=0, highlightthickness=0,
                      command=lambda: show_canvas2(), relief="flat")
    button_5.place(x=33.0, y=223.0, width=126.0, height=56.0)

    canvaslistsuburb.create_text(56.0, 36.0, anchor="nw", text="AJJ", fill="#FFFFFF", font=("Inter Bold", 40 * -1))

    label = Label(window, text="Start date")
    window.sixty = label

    label.place(x=250, y=130)

    cal = Calendar(window,selectmode = 'day', year = 2019, month = 1, day = 1, date_pattern='y-mm-dd')

    window.fifty = cal
    cal.place(x=250, y=150)

    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel

    endLabel.place(x=630, y=130)

    calendarEnd = Calendar(window, selectmode = 'day', year = 2019, month = 1, day = 1, date_pattern='y-mm-dd')

    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)

    canvaslistsuburb.pack()
    current_canvas = canvaslistsuburb
    






#Display Price Listings function
def show_canvas4():
    print("canvas4")
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasPriceListings = Canvas(
        window,
        bg="#E8E8E8",
        height=626,
        width=932,
        bd=0,
        highlightthickness=0,
        relief="ridge"
        )

    canvasPriceListings.place(x = 0, y = 0)
    canvasPriceListings.update()  # Update the canvas before getting dimensions

    canvasPriceListings.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasPriceListings.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")

    canvasPriceListings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasPriceListings
    image_6 = canvasPriceListings.create_image(
        96.0,
        145.0,
        image=image_image_6
    )
    button_image_1 = PhotoImage(
        file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: get_price_chart_data(cal, calendarEnd, citySelect.get() ),
        relief="flat"
    )
    button_1.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )
    image_image_7 = PhotoImage(
        file=relative_to_assets("display_listings_for_suburb_img.png"))
    window.two = image_image_7
    image_7 = canvasPriceListings.create_image(
        564.0,
        70.0,
        image=image_image_7
    )
    
    image_image_1 = PhotoImage(
    file=relative_to_assets("display_price_distribution.png"))
    window.two = image_image_1
    image_1 = canvasPriceListings.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasPriceListings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )
    
    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=350)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=378)
    
    label = Label(window, text="Start date")
    window.sixty = label
    
    label.place(x=250, y=130)
    
    cal = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fifty = cal
    cal.place(x=250, y=150)
    
    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel
    
    endLabel.place(x=630, y=130)
    
    calendarEnd = Calendar(
        window, 
        selectmode='day',
        year=2019,
        month=1,
        day=1,
        date_pattern='y-mm-dd'
    )
    
    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)

    canvasPriceListings.pack()
    current_canvas = canvasPriceListings
    



#Display search records function (Search button)
def show_canvas5():
    print("canvas5")
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasSearch = Canvas(
        window,
        bg="#E8E8E8",
        height=626,
        width=932,
        bd=0,
        highlightthickness=0,
        relief="ridge"
        )

    canvasSearch.place(x = 0, y = 0)
    canvasSearch.update()  # Update the canvas before getting dimensions

    canvasSearch.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasSearch.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")

    canvasSearch.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    
    # Create and place the image on canvasSearch
    image_6 = canvasSearch.create_image(
        96.0,
        145.0,
        image=image_image_6
    )
    button_image_1 = PhotoImage(
        file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getKeywordResults(cal, calendarEnd, entry_1.get(), dataSelect.get()),
        relief="flat"
    )
    button_1.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("Display_Search_Records.png"))
    window.two = image_image_1
    image_1 = canvasSearch.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    labelf = Label(window, text="Enter Keywords separated by comma")
    window.sixtyt = labelf
    
    labelf.place(x=462, y=425)
    
    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    window.three = entry_image_1
    entry_bg_1 = canvasSearch.create_image(
        563.5,
        474.5,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#E8E8E8",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=446.0,
        y=455.0,
        width=235.0,
        height=37.0
    )
    
    label55 = Label(window, text="How Many Columns?")
    window.aaaaaeeeeeeea = label55
    
    label55.place(x=250, y=350)
    
    n = StringVar()
    dataSelect = ttk.Combobox(window, width = 22, height = 13, textvariable = n)
    dataSelect['values'] = ['Short', 'All']
    dataSelect.set('Short')
    
    window.niineeeeee = dataSelect
    dataSelect.place(x=250,y=378)
    
    label = Label(window, text="Start date")
    window.sixty = label
    
    label.place(x=250, y=130)
    
    cal = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fifty = cal
    cal.place(x=250, y=150)
    
    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel
    
    endLabel.place(x=630, y=130)
    
    calendarEnd = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)
    
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasSearch.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    canvasSearch.pack()
    current_canvas = canvasSearch

#Analysing how many customers commented on factors related to cleanliness (multiple key words may be associated with cleanliness – justify your selection).





#Display cleanliness function
def show_canvas3():
    print('canvas 3')
    canvas.pack_forget()
    
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasCleanliness = Canvas(
        window,
        bg = "#E8E8E8",
        height = 626,
        width = 932,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvasCleanliness.place(x = 0, y = 0)
    canvasCleanliness.update()  # Update the canvas before getting dimensions

    canvasCleanliness.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline=""
    )

    canvasCleanliness.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline=""
    )
    
    #label for displaying the cleabliness results
    label3= Label(window, text="", bg="#FFFFFF")
    window.aaaaaa = label3
    
    label3.place(x=232, y=150)
    
    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=350)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=378)
    
    image_image_1 = PhotoImage(
        file=relative_to_assets("display_chart_by_cleanliness.png"))
    window.twelve = image_image_1
    image_1 = canvasCleanliness.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    button_image_1 = PhotoImage(
        file=relative_to_assets("display_by_ratings.png"))
    window.three = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )
    
    image_image_2 = PhotoImage(
    file=relative_to_assets("home.png"))
    window.thirteen = image_image_2
    image_2 = canvasCleanliness.create_image(
        96.0,
        145.0,
        image=image_image_2
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.fourteen = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.fifteen = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.sixteen = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_3 clicked"),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.seventeen = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.eighteen = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasCleanliness.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )
    
    button_image_5 = PhotoImage(
    file=relative_to_assets("display.png"))
    window.nineteen = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getCleanlinessData(cleanlinesskeywords, citySelect.get(), label3),
        relief="flat"
    )
    
    #cleanlinessEntry
    button_5.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    canvasCleanliness.pack()
    current_canvas = canvasCleanliness


# get suburb ratings data
def getSuburbRatings(suburb, howMuchData, dataType):
    print(howMuchData)
    print("get suburb ratings" + suburb)
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()

    if dataType == 'Record':
        if howMuchData == 'Short':
            columnNames = ['id', 'listing_url', 'name', 'description', 'transit', 'street', 'neighbourhood', 'city', 'state', 'zipcode', 'accommodates','bathrooms', 'bedrooms','amenities', 'price',  'review_scores_rating', 'cancellation_policy']

            query = "SELECT l.id,l.listing_url,l.name,l.description,l.transit,l.street,l.neighbourhood,l.city,l.state,l.zipcode,l.accommodates,l.bathrooms,l.bedrooms,l.amenities,l.price,l.review_scores_rating,l.cancellation_policy FROM listingsDec l WHERE l.city = '" + suburb + "' AND l.review_scores_rating > 75 ORDER BY review_scores_rating DESC"

            cursor.execute(query)

            results = cursor.fetchall()

            # Print the column names
            print("Column names:", columnNames)

            return (results, columnNames, suburb)

        elif howMuchData == 'All':
            query = "SELECT * FROM listingsDec l WHERE l.city = '" + suburb + "' AND l.review_scores_rating > 75 ORDER BY review_scores_rating DESC"

            cursor.execute(query)

            results = cursor.fetchall()

            cursor.execute(f"PRAGMA table_info(listingsDec)")
            columns_info = cursor.fetchall()

            columnNames = [col[1] for col in columns_info]

            print("Column names:", columnNames)

            return (results, columnNames, suburb)
    elif dataType == 'Chart':
        query = "SELECT l.name, l.review_scores_rating FROM listingsDec l WHERE l.city = '" + suburb + "' AND l.review_scores_rating > 75 ORDER BY review_scores_rating ASC"
        cursor.execute(query)
        results = cursor.fetchall()

        theScore = []
        theNames = []

        for row in results:
            #print(row[0])
            theNames.append(row[0])
            theScore.append(row[1])
            cursor.execute(query)


        return theScore, suburb, theNames

    connection.close()


# "Display by Ratings" button, "Display List" button
def displaySuburbRatingsRecords(theSuburb, howMuchData):
    results, columnNames, suburb = getSuburbRatings(theSuburb, howMuchData, 'Record')

    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    newWindow = Toplevel(window)
    newWindow.title(f"Listings for {suburb}")
    newWindow.geometry(f"{screen_width}x{screen_height-100}")

    tree = ttk.Treeview(newWindow, column=columnNames, show='headings')
    for index, value in enumerate(columnNames):
        tree.column(f"#{index+1}", anchor=CENTER)
        tree.heading(f"#{index+1}", text=f"{value}")

    for row in results:
        tree.insert("", END, values=row)

    scrollbar = ttk.Scrollbar(newWindow, orient=VERTICAL, command=tree.yview)
    scrollbar.place(x=screen_width - 20, y=0, height=screen_height - 200)

    tree.configure(yscrollcommand=scrollbar.set)

    x_scrollbar = ttk.Scrollbar(newWindow, orient=HORIZONTAL, command=tree.xview)
    x_scrollbar.place(x=0, y=screen_height - 180, width=screen_width - 40)

    tree.configure(xscrollcommand=x_scrollbar.set)

    tree.place(x=10, y=10, width=screen_width - 40, height=screen_height - 200)
    

# "Display by Ratings" button, "Display Chart" button
def displaySuburbRatingsChart(suburb, howMuchData):
    theScore, theSuburb, theNames = getSuburbRatings(suburb, howMuchData, 'Chart')
    fig, ax = plt.subplots(figsize=(5, 2.7))
    ax.scatter(np.arange(len(theScore)), theScore, label='Rating')
    ax.set_yticklabels([])
    ax.set_title(f"Ratings over 75 for {theSuburb}")
    ax.legend()

    mplcursors.cursor(ax, hover=True).connect('add', lambda sel: onHoverRatings(sel, theScore, theNames))
    plt.show()

    
def onHoverRatings(sel, theScore, theNames):
    index = sel.index
    sel.annotation.set_text(f'Rating: {theScore[index]}\nPlace Name: {theNames[index]}')


#Display ratings listings by table/records
def show_canvas6():
    print("canvas 6")
    canvas.pack_forget()
    global current_canvas


    if current_canvas:
        current_canvas.pack_forget()
        
    canvasListingsByRatings = Canvas(
        window,
        bg = "#E8E8E8",
        height = 626,
        width = 932,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
        )

    canvasListingsByRatings.place(x = 0, y = 0)
    canvasListingsByRatings.update()  # Update the canvas before getting dimensions
    
    canvasListingsByRatings.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasListingsByRatings.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")
    

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasListingsByRatings
    image_6 = canvasListingsByRatings.create_image(
        96.0,
        145.0,
        image=image_image_6
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_list.png"))
    window.negativenegative = button_image_1
    button_111 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: displaySuburbRatingsRecords(citySelect.get(), dataSelect.get()),
        relief="flat"
    )
    button_111.place(
        x=284.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("display_chart.png"))
    window.negativenegativenegative = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: displaySuburbRatingsChart(citySelect.get(), dataSelect.get()),
        relief="flat"
    )
    button_2.place(
        x=626.0,
        y=536.0,
        width=218.0,
        height=39.0
    )


    image_image_1 = PhotoImage(
    file=relative_to_assets("display_listings_by_ratings.png"))
    window.two = image_image_1
    image_1 = canvasListingsByRatings.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    canvasListingsByRatings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
        )

    label55 = Label(window, text="How Many Columns?")
    window.aaaaaeeeeeeea = label55
    
    label55.place(x=250, y=150)
    
    n = StringVar()
    dataSelect = ttk.Combobox(window, width = 22, height = 13, textvariable = n)
    dataSelect['values'] = ['Short', 'All']
    dataSelect.set('Short')
    
    window.niineeeeee = dataSelect
    dataSelect.place(x=250,y=178)
    
    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=150)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=178)

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasListingsByRatings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    canvasListingsByRatings.pack()
    current_canvas = canvasListingsByRatings



canvas = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("welcome_img.png"))
image_1 = canvas.create_image(
    563.0,
    312.0,
    image=image_image_1
)

canvas.create_rectangle(
    0.0,
    0.0,
    195.0,
    626.0,
    fill="#32213A",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas6(),
    relief="flat"
)
button_1.place(
    x=33.0,
    y=539.0,
    width=126.0,
    height=56.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("price_chart.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas4(),
    relief="flat"
)
button_2.place(
    x=33.0,
    y=302.0,
    width=126.0,
    height=56.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("cleanliness.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas3(),
    relief="flat"
)
button_3.place(
    x=33.0,
    y=460.0,
    width=126.0,
    height=56.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("search.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas5(),
    relief="flat"
)
button_4.place(
    x=33.0,
    y=381.0,
    width=126.0,
    height=56.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("suburb_listing.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas2(),
    relief="flat"
)
button_5.place(
    x=33.0,
    y=223.0,
    width=126.0,
    height=56.0
)

canvas.create_text(
    56.0,
    36.0,
    anchor="nw",
    text="AJJ",
    fill="#FFFFFF",
    font=("Inter Bold", 40 * -1)
)

image_image_2 = PhotoImage(
    file=relative_to_assets("home.png"))
image_2 = canvas.create_image(
    96.0,
    145.0,
    image=image_image_2
)

canvas.pack()

window.resizable(False, False)
window.mainloop()