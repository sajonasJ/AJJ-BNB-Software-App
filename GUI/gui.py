
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from clean import cleanlinesskeywords
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Frame, Label, StringVar, END, Toplevel, CENTER, VERTICAL, HORIZONTAL
from tkinter import ttk
import pandas as pd
#import matplotlib as plt
import sqlite3
from tkcalendar import Calendar


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("AJJ BNB")

window.configure(bg = "#E8E8E8")

window_height = 626
window_width = 932

def center_screen():
    """ gets the coordinates of the center of the screen """
    global screen_height, screen_width, x_cordinate, y_cordinate

    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
        # Coordinates of the upper left corner of the window to make the window appear in the center
    x_cordinate = int((screen_width/2) - (window_width/2))
    y_cordinate = int((screen_height/2) - (window_height/2))
    window.geometry("{}x{}+{}+{}".format(window_width, window_height, x_cordinate, y_cordinate))

center_screen()
    
photo_images = {}
current_canvas = None

connection = sqlite3.connect('data.db')
cursor = connection.cursor()

query = "SELECT DISTINCT city FROM listingsDec"

cursor.execute(query)

results = cursor.fetchall()

cityArray = []
for row in results:
    cityArray.append(row[0])

#print(cityArray)
connection.close()

#grab and store the start and end date for a user selected period from 2 calendars
def selectDate(startDate,endDate):
    #date.config(text = "Selected Date is: " + cal.get_date())
    print(startDate.get_date(),endDate.get_date())
    return (startDate.get_date(), endDate.get_date())


#get suburb listings data
def getSuburbListings(startDate, endDate, suburb, howMuchData):
    dates = selectDate(startDate,endDate)
    print('startDate=',dates[0], 'endDate=',dates[1], 'suburb=', suburb)
    #print(fromDate, to, property, dataframe)
    
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()

    if(howMuchData == 'Short'):
        
        columnNames = ['id', 'listing_url', 'name', 'description', 'transit', 'street', 'neighbourhood', 'city', 'state', 'zipcode', 'accommodates','bathrooms', 'bedrooms','amenities', 'price',  'review_scores_rating', 'cancellation_policy']
        
        query = "SELECT DISTINCT l.id,l.listing_url,l.name,l.description,l.transit,l.street,l.neighbourhood,l.city,l.state,l.zipcode,l.accommodates,l.bathrooms,l.bedrooms,l.amenities,l.price,l.review_scores_rating,l.cancellation_policy FROM listingsDec l INNER JOIN calendarDec c ON c.listing_id = l.id WHERE c.date BETWEEN ? AND ? AND l.city = ? ORDER BY l.id"
    
        cursor.execute(query, (dates[0], dates[1], suburb))
        results = cursor.fetchall()
            
        # Print the column names
        print("Column names:", columnNames)
        
        displaySuburbListings(results, columnNames, suburb)
        
    elif(howMuchData == 'All'):
        query = "SELECT DISTINCT l.* FROM listingsDec l INNER JOIN calendarDec c ON c.listing_id = l.id WHERE c.date BETWEEN ? AND ? AND l.city = ? ORDER BY l.id"
    
        cursor.execute(query, (dates[0], dates[1], suburb))
        results = cursor.fetchall()
            
        cursor.execute(f"PRAGMA table_info(listingsDec)")
        columns_info = cursor.fetchall()
        # Fetch the results

        columnNames = [col[1] for col in columns_info]

        # Print the column names
        print("Column names:", columnNames)
        
        displaySuburbListings(results, columnNames, suburb)

    connection.close()


#For a user-selected period, report the information of all listings in a specified suburb

#Note, what is "the information"?

#display a chart with all the listings from the data from getSuburbListings() "Suburb Listing" button
def displaySuburbListings(results, columnNames, suburb):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    newWindow = Toplevel(window)
    newWindow.title(f"Listings for {suburb}")
    newWindow.geometry(f"{screen_width}x{screen_height-100}")

    tree = ttk.Treeview(newWindow, column=columnNames, show='headings')
    for index, value in enumerate(columnNames):
        tree.column(f"#{index+1}", anchor=CENTER)
        tree.heading(f"#{index+1}", text=f"{value}")
        
    for row in results:
        tree.insert("", END, values=row)  
        
    scrollbar = ttk.Scrollbar(newWindow, orient=VERTICAL, command=tree.yview)
    scrollbar.place(x=screen_width - 20, y=0, height=screen_height - 200)

    tree.configure(yscrollcommand=scrollbar.set)
    
    x_scrollbar = ttk.Scrollbar(newWindow, orient=HORIZONTAL, command=tree.xview)
    x_scrollbar.place(x=0, y=screen_height - 180, width=screen_width - 40)

    tree.configure(xscrollcommand=x_scrollbar.set)
    
    tree.place(x=10, y=10, width=screen_width - 40, height=screen_height - 200)


#Display suburb listing
def show_canvas2():
    print('canvas 2')
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasListSuburb = Canvas(
    window,
        bg = "#E8E8E8",
        height = 626,
        width = 932,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvasListSuburb.place(x = 0, y = 0)
    canvasListSuburb.update()  # Update the canvas before getting dimensions

    canvasListSuburb.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasListSuburb.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")

    canvasListSuburb.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasListSuburb
    image_6 = canvasListSuburb.create_image(
        96.0,
        145.0,
        image=image_image_6
    )
    button_image_1 = PhotoImage(
        file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getSuburbListings(cal, calendarEnd, citySelect.get(), dataSelect.get()),
        relief="flat"
    )
    button_1.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )
    image_image_7 = PhotoImage(
        file=relative_to_assets("display_listings_for_suburb_img.png"))
    window.two = image_image_7
    image_7 = canvasListSuburb.create_image(
        564.0,
        70.0,
        image=image_image_7
    )
    
    label55 = Label(window, text="How Many Columns?")
    window.aaaaaeeeeeeea = label55
    
    label55.place(x=250, y=350)
    
    n = StringVar()
    dataSelect = ttk.Combobox(window, width = 22, height = 13, textvariable = n)
    dataSelect['values'] = ['Short', 'All']
    dataSelect.set('Short')
    
    window.niineeeeee = dataSelect
    dataSelect.place(x=250,y=378)
    
    
    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=350)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=378)
    
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasListSuburb.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )
    
    label = Label(window, text="Start date")
    window.sixty = label
    
    label.place(x=250, y=130)
    
    cal = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fifty = cal
    cal.place(x=250, y=150)
    
    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel
    
    endLabel.place(x=630, y=130)
    
    calendarEnd = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)

    canvasListSuburb.pack()
    current_canvas = canvasListSuburb
    

#For a user-selected period, produce a chart to show the distribution of prices of properties
#get property prices data for a chart "Price Chart" button
def getPriceChartData(startDate, endDate):
    dates = selectDate(startDate,endDate)

    print('startDate=',dates[0], 'endDate=',dates[1])
    #print(fromDate, to, property, dataframe)
    
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()

    query = "SELECT l.name, c.* FROM calendarDec c INNER JOIN listingsDec l ON c.listing_id = l.id WHERE c.date BETWEEN ? AND ? AND c.price NOT NULL"

    cursor.execute(query, (dates[0], dates[1]))

    # Fetch the results
    results = cursor.fetchall()
    # Process the results (print in this example)
    #print("the total cleanliness results=",len(results))
    for row in results:
        print(row)

    connection.close()
    
    
#display the price chart (matplotlib graph) from the data from getPriceChartData()
def displayPriceChart():
    print("display price chart")

#Display Price Listings function
def show_canvas4():
    print("canvas4")
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasPriceListings = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )

    canvasPriceListings.place(x = 0, y = 0)
    canvasPriceListings.update()  # Update the canvas before getting dimensions

    canvasPriceListings.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasPriceListings.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")

    canvasPriceListings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasPriceListings
    image_6 = canvasPriceListings.create_image(
        96.0,
        145.0,
        image=image_image_6
    )
    button_image_1 = PhotoImage(
        file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getPriceChartData(cal, calendarEnd),
        relief="flat"
    )
    button_1.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )
    image_image_7 = PhotoImage(
        file=relative_to_assets("display_listings_for_suburb_img.png"))
    window.two = image_image_7
    image_7 = canvasPriceListings.create_image(
        564.0,
        70.0,
        image=image_image_7
    )
    
    image_image_1 = PhotoImage(
    file=relative_to_assets("display_price_distribution.png"))
    window.two = image_image_1
    image_1 = canvasPriceListings.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasPriceListings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )
    
    label = Label(window, text="Start date")
    window.sixty = label
    
    label.place(x=250, y=130)
    
    cal = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fifty = cal
    cal.place(x=250, y=150)
    
    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel
    
    endLabel.place(x=630, y=130)
    
    calendarEnd = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)

    canvasPriceListings.pack()
    current_canvas = canvasPriceListings
    

#For a user-selected period, retrieve all records that contain a keyword (user entered), e.g. pool, pet.

#clear the user input
def cleanUserInput(input):
    splitInput = [item.strip() for item in input.split(',')]
    return splitInput


#get keyword results from the user
def getKeywordResults(startDate, endDate,keyWords, howMuchData):
    cleanedWords = cleanUserInput(keyWords)
    dates = selectDate(startDate,endDate)
    print('startDate=',dates[0], 'endDate=',dates[1])
    #print(fromDate, to, property, dataframe)
    
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()

    if(howMuchData == 'Short'):
        
        columnNames = ['id', 'listing_url', 'name', 'description', 'transit', 'street', 'neighbourhood', 'city', 'state', 'zipcode', 'accommodates','bathrooms', 'bedrooms','amenities', 'price',  'review_scores_rating', 'cancellation_policy']
        
        query = "SELECT DISTINCT l.id,l.listing_url,l.name,l.description,l.transit,l.street,l.neighbourhood,l.city,l.state,l.zipcode,l.accommodates,l.bathrooms,l.bedrooms,l.amenities,l.price,l.review_scores_rating,l.cancellation_policy FROM listingsDec l INNER JOIN calendarDec c ON c.listing_id = l.id WHERE c.date BETWEEN ? AND ? AND ("
        query += " OR ".join(["l.amenities LIKE ?" for _ in cleanedWords])
        query += ") ORDER BY l.id"
        params = (dates[0], dates[1]) + tuple(f"%{word}%" for word in cleanedWords)
        cursor.execute(query, params)
        
        results = cursor.fetchall()
            
        # Print the column names
        print("Column names:", columnNames)
        
        displayKeywordResults(results, columnNames, keyWords)
        
    elif(howMuchData == 'All'):
        query = "SELECT DISTINCT l.* FROM listingsDec l INNER JOIN calendarDec c ON c.listing_id = l.id WHERE c.date BETWEEN ? AND ? AND ("
        query += " OR ".join(["l.amenities LIKE ?" for _ in cleanedWords])
        query += ") ORDER BY l.id"
        params = (dates[0], dates[1]) + tuple(f"%{word}%" for word in cleanedWords)
        cursor.execute(query, params)
        
        results = cursor.fetchall()
            
        cursor.execute(f"PRAGMA table_info(listingsDec)")
        columns_info = cursor.fetchall()

        columnNames = [col[1] for col in columns_info]

        print("Column names:", columnNames)
        
        displayKeywordResults(results, columnNames, keyWords)
        
    connection.close()


#display the results from the chosen keywords the "Search" button
def displayKeywordResults(results, columnNames, keywords):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    newWindow = Toplevel(window)
    newWindow.title(f"Listings for {keywords}")
    newWindow.geometry(f"{screen_width}x{screen_height-100}")

    tree = ttk.Treeview(newWindow, column=columnNames, show='headings')
    for index, value in enumerate(columnNames):
        tree.column(f"#{index+1}", anchor=CENTER)
        tree.heading(f"#{index+1}", text=f"{value}")
        
    for row in results:
        tree.insert("", END, values=row)  
        
    scrollbar = ttk.Scrollbar(newWindow, orient=VERTICAL, command=tree.yview)
    scrollbar.place(x=screen_width - 20, y=0, height=screen_height - 200)

    tree.configure(yscrollcommand=scrollbar.set)
    
    x_scrollbar = ttk.Scrollbar(newWindow, orient=HORIZONTAL, command=tree.xview)
    x_scrollbar.place(x=0, y=screen_height - 180, width=screen_width - 40)

    tree.configure(xscrollcommand=x_scrollbar.set)
    
    tree.place(x=10, y=10, width=screen_width - 40, height=screen_height - 200)


#Display search records function (Search button)
def show_canvas5():
    print("canvas5")
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasSearch = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )

    canvasSearch.place(x = 0, y = 0)
    canvasSearch.update()  # Update the canvas before getting dimensions

    canvasSearch.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasSearch.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")

    canvasSearch.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    
    # Create and place the image on canvasSearch
    image_6 = canvasSearch.create_image(
        96.0,
        145.0,
        image=image_image_6
    )
    button_image_1 = PhotoImage(
        file=relative_to_assets("display.png"))
    window.negative = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getKeywordResults(cal, calendarEnd, entry_1.get(), dataSelect.get()),
        relief="flat"
    )
    button_1.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("Display_Search_Records.png"))
    window.two = image_image_1
    image_1 = canvasSearch.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    labelf = Label(window, text="Enter Keywords separated by comma")
    window.sixtyt = labelf
    
    labelf.place(x=462, y=425)
    
    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    window.three = entry_image_1
    entry_bg_1 = canvasSearch.create_image(
        563.5,
        474.5,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#E8E8E8",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=446.0,
        y=455.0,
        width=235.0,
        height=37.0
    )
    
    label55 = Label(window, text="How Many Columns?")
    window.aaaaaeeeeeeea = label55
    
    label55.place(x=250, y=350)
    
    n = StringVar()
    dataSelect = ttk.Combobox(window, width = 22, height = 13, textvariable = n)
    dataSelect['values'] = ['Short', 'All']
    dataSelect.set('Short')
    
    window.niineeeeee = dataSelect
    dataSelect.place(x=250,y=378)
    
    label = Label(window, text="Start date")
    window.sixty = label
    
    label.place(x=250, y=130)
    
    cal = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fifty = cal
    cal.place(x=250, y=150)
    
    endLabel = Label(window, text="End date")
    window.sixtytwo = endLabel
    
    endLabel.place(x=630, y=130)
    
    calendarEnd = Calendar(
        window, 
        selectmode = 'day',
        year = 2019, 
        month = 1,
        day = 1,
        date_pattern='y-mm-dd'
    )
    
    window.fiftytwo = calendarEnd
    calendarEnd.place(x=630, y=150)
    
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasSearch.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    canvasSearch.pack()
    current_canvas = canvasSearch

#Analysing how many customers commented on factors related to cleanliness (multiple key words may be associated with cleanliness – justify your selection).

#display cleanliness chart from the getCleanlinessData() function "Cleanliness" button
def displayCleanliness():
    print("display cleanliness")


#get the cleanliness data for the displayCleanliness()
def getCleanlinessData(keywords, suburb):
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()
    query = "SELECT r.* FROM reviewsDec r INNER JOIN listingsDec l ON r.listing_id = l.id WHERE l.city = ? AND (" + " OR ".join(["comments LIKE ?"] * len(keywords)) + ")"

    # Modify each keyword to include wildcards for partial matching
    modified_keywords = ['%{}%'.format(keyword) for keyword in keywords]

    # Combine suburb and modified keywords into a single tuple
    params = (suburb,) + tuple(modified_keywords)

    # Execute the query with the parameters
    cursor.execute(query, params)

    # Fetch the results
    results = cursor.fetchall()

    print("the total cleanliness results=",len(results))

    connection.close()
    
    displayCleanliness()

    
#Display cleanliness function
def show_canvas3():
    print('canvas 3')
    canvas.pack_forget()
    
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    #canvasListSuburb.pack_forget()
    canvasCleanliness = Canvas(
        window,
        bg = "#E8E8E8",
        height = 626,
        width = 932,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvasCleanliness.place(x = 0, y = 0)
    canvasCleanliness.update()  # Update the canvas before getting dimensions

    canvasCleanliness.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline=""
    )

    canvasCleanliness.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline=""
    )
    
    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=350)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=378)
    
    '''
    entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
    window.eleven = entry_image_1
    
    #global cleanlinessEntry
    
    entry_bg_1 = canvasCleanliness.create_image(
        563.5,
        474.5,
        image=entry_image_1
    )
    cleanlinessEntry = Entry(
        bd=0,
        bg="#E8E8E8",
        fg="#000716",
        highlightthickness=0
    )
    cleanlinessEntry.place(
        x=446.0,
        y=455.0,
        width=235.0,
        height=37.0
    )
    '''
    image_image_1 = PhotoImage(
    file=relative_to_assets("display_chart_by_cleanliness.png"))
    window.twelve = image_image_1
    image_1 = canvasCleanliness.create_image(
    564.0,
    70.0,
    image=image_image_1
    )
    
    button_image_1 = PhotoImage(
        file=relative_to_assets("display_by_ratings.png"))
    window.three = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )
    
    image_image_2 = PhotoImage(
    file=relative_to_assets("home.png"))
    window.thirteen = image_image_2
    image_2 = canvasCleanliness.create_image(
        96.0,
        145.0,
        image=image_image_2
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.fourteen = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.fifteen = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.sixteen = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_3 clicked"),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.seventeen = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.eighteen = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasCleanliness.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )
    

    
    button_image_5 = PhotoImage(
    file=relative_to_assets("display.png"))
    window.nineteen = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: getCleanlinessData(cleanlinesskeywords, citySelect.get()),
        relief="flat"
    )
    
    #cleanlinessEntry
    button_5.place(
        x=454.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    canvasCleanliness.pack()
    current_canvas = canvasCleanliness


#get suburb ratings data
def getSuburbRatings(suburb):
    print("get suburb ratings" + suburb)
    connection = sqlite3.connect('data.db')
    cursor = connection.cursor()
    
    query = "SELECT * FROM listingsDec l WHERE l.city = '" + suburb + "' AND l.review_scores_rating > 75"

    cursor.execute(query)

    # Fetch the results
    results = cursor.fetchall()
    # Process the results (print in this example)
    #print("the total cleanliness results=",len(results))
    for row in results:
        print(row)

    connection.close()
    
    
#"Display by Ratings" button, "Display List" button
def displaySuburbRatingsRecords(suburb):
    getSuburbRatings(suburb)
    print("display suburb ratings record")
    

#"Display by Ratings" button, "Display Chart" button
def displaySuburbRatingsChart(suburb):
    getSuburbRatings(suburb)
    print("display suburb ratings chart")


#Display ratings listings by table/records
def show_canvas6():
    print("canvas 6")
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasListingsByRatings = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )

    canvasListingsByRatings.place(x = 0, y = 0)
    canvasListingsByRatings.update()  # Update the canvas before getting dimensions
    
    canvasListingsByRatings.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasListingsByRatings.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")
    

    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasListingsByRatings
    image_6 = canvasListingsByRatings.create_image(
        96.0,
        145.0,
        image=image_image_6
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_list.png"))
    window.negativenegative = button_image_1
    button_111 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: displaySuburbRatingsRecords(citySelect.get()),
        relief="flat"
    )
    button_111.place(
        x=284.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("display_chart.png"))
    window.negativenegativenegative = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: displaySuburbRatingsChart(citySelect.get()),
        relief="flat"
    )
    button_2.place(
        x=626.0,
        y=536.0,
        width=218.0,
        height=39.0
    )


    image_image_1 = PhotoImage(
    file=relative_to_assets("display_listings_by_ratings.png"))
    window.two = image_image_1
    image_1 = canvasListingsByRatings.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    canvasListingsByRatings.create_text(
    56.0,
    36.0,
    anchor="nw",
    text="AJJ",
    fill="#FFFFFF",
    font=("Inter Bold", 40 * -1)
    )

    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=150)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=178)
    
    '''
    entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
    window.three = entry_image_1
    entry_bg_1 = canvasListingsByRatings.create_image(
        563.5,
        474.5,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#E8E8E8",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=446.0,
        y=455.0,
        width=235.0,
        height=37.0
    )
    '''
    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasListingsByRatings.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    canvasListingsByRatings.pack()
    current_canvas = canvasListingsByRatings
    
'''
#Display ratings listings by chart
def show_canvas7():
    canvas.pack_forget()
    global current_canvas
    
    if current_canvas:
        current_canvas.pack_forget()
        
    canvasListingsByRatingsChart = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
    )

    canvasListingsByRatingsChart.place(x = 0, y = 0)
    canvasListingsByRatingsChart.update()  # Update the canvas before getting dimensions

    canvasListingsByRatingsChart.create_rectangle(
        228.0,
        122.0,
        899.0,
        517.0,
        fill="#FFFFFF",
        outline="")

    canvasListingsByRatingsChart.create_rectangle(
        0.0,
        0.0,
        195.0,
        626.0,
        fill="#32213A",
        outline="")
    
    image_image_6 = PhotoImage(
        file=relative_to_assets("home.png"))
    window.one = image_image_6
    # Create and place the image on canvasListingsByRatingsChart
    image_6 = canvasListingsByRatingsChart.create_image(
        96.0,
        145.0,
        image=image_image_6
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_list.png"))
    window.negativenegative = button_image_1
    button_111 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_111.place(
        x=284.0,
        y=536.0,
        width=218.0,
        height=39.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("display_chart.png"))
    window.negativenegativenegative = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        relief="flat"
    )
    button_2.place(
        x=626.0,
        y=536.0,
        width=218.0,
        height=39.0
    )


    image_image_1 = PhotoImage(
    file=relative_to_assets("display_listings_by_ratings.png"))
    window.two = image_image_1
    image_1 = canvasListingsByRatingsChart.create_image(
        564.0,
        70.0,
        image=image_image_1
    )
    
    canvasListingsByRatingsChart.create_text(
    56.0,
    36.0,
    anchor="nw",
    text="AJJ",
    fill="#FFFFFF",
    font=("Inter Bold", 40 * -1)
    )

    label2 = Label(window, text="Pick A Suburb")
    window.aaaaaa = label2
    
    label2.place(x=532, y=150)
    
    n = StringVar()
    citySelect = ttk.Combobox(window, width = 27, height = 13, textvariable = n)
    citySelect['values'] = cityArray
    
    window.niine = citySelect
    citySelect.place(x=472,y=178)
    
    
    entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
    window.three = entry_image_1
    entry_bg_1 = canvasListingsByRatingsChart.create_image(
        563.5,
        474.5,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#E8E8E8",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=446.0,
        y=455.0,
        width=235.0,
        height=37.0
    )

    button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
    window.six = button_image_1
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas6(),
        relief="flat"
    )
    button_1.place(
        x=33.0,
        y=539.0,
        width=126.0,
        height=56.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("price_chart.png"))
    window.seven = button_image_2
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas4(),
        relief="flat"
    )
    button_2.place(
        x=33.0,
        y=302.0,
        width=126.0,
        height=56.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("cleanliness.png"))
    window.eight = button_image_3
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas3(),
        relief="flat"
    )
    button_3.place(
        x=33.0,
        y=460.0,
        width=126.0,
        height=56.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("search.png"))
    window.nine = button_image_4
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas5(),
        relief="flat"
    )
    button_4.place(
        x=33.0,
        y=381.0,
        width=126.0,
        height=56.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("suburb_listing.png"))
    window.ten = button_image_5
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: show_canvas2(),
        relief="flat"
    )
    button_5.place(
        x=33.0,
        y=223.0,
        width=126.0,
        height=56.0
    )

    canvasListingsByRatingsChart.create_text(
        56.0,
        36.0,
        anchor="nw",
        text="AJJ",
        fill="#FFFFFF",
        font=("Inter Bold", 40 * -1)
    )

    canvasListingsByRatingsChart.pack()
    current_canvas = canvasListingsByRatingsChart
'''

#clear search fields (button will be needed for it)
def clearSearchQuery(): 
    print("clear search fields")


#display error messages
def displayErrorMessage(errorMessage):
    print("display error message" + errorMessage)



canvas = Canvas(
    window,
    bg = "#E8E8E8",
    height = 626,
    width = 932,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("welcome_img.png"))
image_1 = canvas.create_image(
    563.0,
    312.0,
    image=image_image_1
)

canvas.create_rectangle(
    0.0,
    0.0,
    195.0,
    626.0,
    fill="#32213A",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("display_by_ratings.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas6(),
    relief="flat"
)
button_1.place(
    x=33.0,
    y=539.0,
    width=126.0,
    height=56.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("price_chart.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas4(),
    relief="flat"
)
button_2.place(
    x=33.0,
    y=302.0,
    width=126.0,
    height=56.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("cleanliness.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas3(),
    relief="flat"
)
button_3.place(
    x=33.0,
    y=460.0,
    width=126.0,
    height=56.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("search.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas5(),
    relief="flat"
)
button_4.place(
    x=33.0,
    y=381.0,
    width=126.0,
    height=56.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("suburb_listing.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_canvas2(),
    relief="flat"
)
button_5.place(
    x=33.0,
    y=223.0,
    width=126.0,
    height=56.0
)

canvas.create_text(
    56.0,
    36.0,
    anchor="nw",
    text="AJJ",
    fill="#FFFFFF",
    font=("Inter Bold", 40 * -1)
)

image_image_2 = PhotoImage(
    file=relative_to_assets("home.png"))
image_2 = canvas.create_image(
    96.0,
    145.0,
    image=image_image_2
)

canvas.pack()

window.resizable(False, False)
window.mainloop()
